<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/social-map-fe/src/components/Chat/Chat.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/social-map-fe/src/components/Chat/Chat.css" />
              <option name="originalContent" value="/* ===== FACEBOOK-STYLE CHAT POPUP ===== */&#10;.chat-popup-overlay {&#10;    position: fixed;&#10;    top: 0;&#10;    left: 0;&#10;    right: 0;&#10;    bottom: 0;&#10;    background: transparent;&#10;    z-index: 9998;&#10;    opacity: 0;&#10;    visibility: hidden;&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.chat-popup-overlay.is-active {&#10;    opacity: 1;&#10;    visibility: visible;&#10;}&#10;&#10;.side-chat {&#10;    position: fixed;&#10;    top: 95px;&#10;    right: 20px;&#10;    width: 360px;&#10;    max-height: 650px;&#10;    background: #fff;&#10;    border-radius: 8px;&#10;    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);&#10;    z-index: 10000;&#10;    display: flex;&#10;    flex-direction: column;&#10;    opacity: 0;&#10;    visibility: hidden;&#10;    transform: translateY(-10px) scale(0.95);&#10;    transition: all 0.2s cubic-bezier(0.2, 0, 0.2, 1);&#10;    border: 1px solid #e4e6ea;&#10;    will-change: transform, opacity;&#10;    /* Improve performance */&#10;}&#10;&#10;/* Speech bubble arrow pointing directly to chat icon */&#10;.side-chat::before {&#10;    content: '';&#10;    position: absolute;&#10;    top: -24px;&#10;    /* Extended to reach chat icon */&#10;    right: 272px;&#10;    width: 0;&#10;    height: 0;&#10;    border-left: 12px solid transparent;&#10;    border-right: 12px solid transparent;&#10;    border-bottom: 24px solid #e4e6ea;&#10;    /* Longer arrow to reach icon */&#10;    z-index: 10001;&#10;    opacity: 0;&#10;    transform: translateY(-5px);&#10;    transition: all 0.2s cubic-bezier(0.2, 0, 0.2, 1);&#10;    pointer-events: none;&#10;}&#10;&#10;.side-chat::after {&#10;    content: '';&#10;    position: absolute;&#10;    top: -22px;&#10;    /* Extended to reach chat icon */&#10;    right: 272px;&#10;    width: 0;&#10;    height: 0;&#10;    border-left: 12px solid transparent;&#10;    border-right: 12px solid transparent;&#10;    border-bottom: 22px solid #fff;&#10;    /* Longer arrow to reach icon */&#10;    z-index: 10002;&#10;    opacity: 0;&#10;    transform: translateY(-5px);&#10;    transition: all 0.2s cubic-bezier(0.2, 0, 0.2, 1);&#10;    pointer-events: none;&#10;}&#10;&#10;.side-chat.is-active {&#10;    opacity: 1;&#10;    visibility: visible;&#10;    transform: translateY(0) scale(1);&#10;}&#10;&#10;.side-chat.is-active::before,&#10;.side-chat.is-active::after {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;}&#10;&#10;.chat-header {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    align-items: center;&#10;    padding: 16px 20px;&#10;    border-bottom: 1px solid #e4e6ea;&#10;    background: #fff;&#10;    border-radius: 8px 8px 0 0;&#10;    position: relative;&#10;}&#10;&#10;.chat-header::before {&#10;    content: '';&#10;    position: absolute;&#10;    top: -1px;&#10;    left: -1px;&#10;    right: -1px;&#10;    height: 1px;&#10;    background: #e4e6ea;&#10;    border-radius: 8px 8px 0 0;&#10;}&#10;&#10;.chat-header h3 {&#10;    margin: 0;&#10;    font-size: 18px;&#10;    font-weight: 600;&#10;    color: #333;&#10;}&#10;&#10;.chat-close-btn {&#10;    background: none;&#10;    border: none;&#10;    font-size: 24px;&#10;    cursor: pointer;&#10;    color: #666;&#10;    padding: 0;&#10;    width: 30px;&#10;    height: 30px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    border-radius: 50%;&#10;    transition: background-color 0.2s;&#10;}&#10;&#10;.chat-close-btn:hover {&#10;    background-color: #e9ecef;&#10;}&#10;&#10;/* Chat Search Box */&#10;.chat-search-box {&#10;    padding: 12px 16px;&#10;    border-bottom: 1px solid #e4e6ea;&#10;    background: #fff;&#10;    position: relative;&#10;}&#10;&#10;.chat-search-input {&#10;    width: 100%;&#10;    padding: 10px 40px 10px 14px;&#10;    border: 1px solid #ddd;&#10;    border-radius: 20px;&#10;    font-size: 14px;&#10;    outline: none;&#10;    transition: border-color 0.2s;&#10;    background: #f0f2f5;&#10;}&#10;&#10;.chat-search-input:focus {&#10;    border-color: #EC5E95;&#10;    background: #fff;&#10;}&#10;&#10;.chat-search-input::placeholder {&#10;    color: #999;&#10;}&#10;&#10;.chat-search-clear {&#10;    position: absolute;&#10;    right: 26px;&#10;    top: 50%;&#10;    transform: translateY(-50%);&#10;    background: none;&#10;    border: none;&#10;    color: #999;&#10;    cursor: pointer;&#10;    font-size: 20px;&#10;    padding: 4px;&#10;    width: 24px;&#10;    height: 24px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    border-radius: 50%;&#10;    transition: all 0.2s;&#10;}&#10;&#10;.chat-search-clear:hover {&#10;    background: #e4e6ea;&#10;    color: #333;&#10;}&#10;&#10;.chat-friends-list {&#10;    flex: 1;&#10;    overflow-y: auto;&#10;    padding: 8px 0;&#10;    max-height: 550px;&#10;}&#10;&#10;.friend-item {&#10;    display: flex;&#10;    align-items: center;&#10;    padding: 10px 16px;&#10;    cursor: pointer;&#10;    transition: background-color 0.2s;&#10;    position: relative;&#10;    margin: 0 4px;&#10;    border-radius: 6px;&#10;}&#10;&#10;.friend-item:hover {&#10;    background-color: #f2f3f5;&#10;}&#10;&#10;.friend-item.active {&#10;    background-color: #e7f3ff;&#10;}&#10;&#10;.friend-avatar {&#10;    width: 40px;&#10;    height: 40px;&#10;    border-radius: 50%;&#10;    margin-right: 12px;&#10;    flex-shrink: 0;&#10;    object-fit: cover;&#10;    background: #f0f2f5;&#10;    border: 2px solid #fff;&#10;    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.friend-info {&#10;    flex: 1;&#10;    min-width: 0;&#10;}&#10;&#10;.friend-name {&#10;    font-weight: 500;&#10;    color: #333;&#10;    font-size: 14px;&#10;    margin-bottom: 2px;&#10;}&#10;&#10;.friend-status {&#10;    font-size: 12px;&#10;    color: #666;&#10;}&#10;&#10;/* Typing Indicator Inline (for friend list) */&#10;.typing-indicator-text {&#10;    display: inline-flex;&#10;    align-items: center;&#10;    gap: 4px;&#10;    color: #65676b;&#10;    font-style: italic;&#10;}&#10;&#10;.typing-dots-inline {&#10;    display: inline-flex;&#10;    gap: 2px;&#10;}&#10;&#10;.typing-dots-inline span {&#10;    animation: typingDots 1.4s infinite;&#10;    opacity: 0.4;&#10;}&#10;&#10;.typing-dots-inline span:nth-child(2) {&#10;    animation-delay: 0.2s;&#10;}&#10;&#10;.typing-dots-inline span:nth-child(3) {&#10;    animation-delay: 0.4s;&#10;}&#10;&#10;@keyframes typingDots {&#10;    0%, 60%, 100% {&#10;        opacity: 0.4;&#10;    }&#10;    30% {&#10;        opacity: 1;&#10;    }&#10;}&#10;&#10;/* Unread Count Badge */&#10;.unread-count {&#10;    background: #EC5E95;&#10;    color: white;&#10;    border-radius: 12px;&#10;    padding: 2px 8px;&#10;    font-size: 12px;&#10;    font-weight: 600;&#10;    min-width: 20px;&#10;    text-align: center;&#10;    margin-left: auto;&#10;}&#10;&#10;/* Chat Loading State */&#10;.chat-loading,&#10;.chat-empty {&#10;    padding: 20px;&#10;    text-align: center;&#10;    color: #65676b;&#10;    font-size: 14px;&#10;}&#10;&#10;/* Connection Status */&#10;.chat-connection-status {&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    gap: 8px;&#10;    padding: 8px;&#10;    background: #fff3cd;&#10;    border-top: 1px solid #e4e6ea;&#10;    font-size: 12px;&#10;    color: #856404;&#10;}&#10;&#10;.connection-indicator {&#10;    width: 8px;&#10;    height: 8px;&#10;    border-radius: 50%;&#10;}&#10;&#10;.connection-indicator.online {&#10;    background: #31a24c;&#10;}&#10;&#10;.connection-indicator.offline {&#10;    background: #f02849;&#10;    animation: pulse 1.5s infinite;&#10;}&#10;&#10;@keyframes pulse {&#10;    0%, 100% {&#10;        opacity: 1;&#10;    }&#10;    50% {&#10;        opacity: 0.5;&#10;    }&#10;}&#10;&#10;.chat-conversation {&#10;    display: none;&#10;    /* Ẩn conversation cũ vì đã sử dụng Facebook-style chat windows */&#10;}&#10;&#10;.chat-conversation.show {&#10;    display: none;&#10;    /* Ẩn conversation cũ */&#10;}&#10;&#10;.conversation-header {&#10;    display: flex;&#10;    align-items: center;&#10;    padding: 20px;&#10;    border-bottom: 1px solid #eee;&#10;    background: #f8f9fa;&#10;}&#10;&#10;.back-to-friends {&#10;    background: none;&#10;    border: none;&#10;    font-size: 20px;&#10;    cursor: pointer;&#10;    color: #666;&#10;    margin-right: 15px;&#10;    padding: 5px;&#10;    border-radius: 50%;&#10;    width: 30px;&#10;    height: 30px;&#10;    display: flex;&#10;    align-items: center;&#10;    justify-content: center;&#10;    transition: background-color 0.2s;&#10;}&#10;&#10;.back-to-friends:hover {&#10;    background-color: #e9ecef;&#10;}&#10;&#10;.conversation-avatar {&#10;    width: 40px;&#10;    height: 40px;&#10;    border-radius: 50%;&#10;    margin-right: 12px;&#10;}&#10;&#10;.conversation-info {&#10;    flex: 1;&#10;}&#10;&#10;.conversation-name {&#10;    font-weight: 600;&#10;    color: #333;&#10;    font-size: 16px;&#10;    margin-bottom: 2px;&#10;}&#10;&#10;.conversation-status {&#10;    font-size: 12px;&#10;    color: #28a745;&#10;}&#10;&#10;.messages-container {&#10;    flex: 1;&#10;    overflow-y: auto;&#10;    padding: 15px;&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 15px;&#10;}&#10;&#10;.message {&#10;    display: flex;&#10;    align-items: flex-end;&#10;    gap: 8px;&#10;}&#10;&#10;.message.sent {&#10;    flex-direction: row-reverse;&#10;}&#10;&#10;.message-avatar {&#10;    width: 30px;&#10;    height: 30px;&#10;    border-radius: 50%;&#10;    flex-shrink: 0;&#10;}&#10;&#10;.message.sent .message-avatar {&#10;    display: none;&#10;}&#10;&#10;.message-content {&#10;    max-width: 70%;&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 2px;&#10;}&#10;&#10;.message.sent .message-content {&#10;    align-items: flex-end;&#10;}&#10;&#10;.message-text {&#10;    background-color: #f1f3f4;&#10;    padding: 10px 14px;&#10;    border-radius: 18px;&#10;    font-size: 14px;&#10;    line-height: 1.4;&#10;    word-wrap: break-word;&#10;}&#10;&#10;.message.sent .message-text {&#10;    background-color: #EC5E95;&#10;    color: white;&#10;}&#10;&#10;.message-time {&#10;    font-size: 11px;&#10;    color: #666;&#10;    margin: 0 14px;&#10;}&#10;&#10;.message-input-container {&#10;    display: flex;&#10;    padding: 15px 20px;&#10;    border-top: 1px solid #eee;&#10;    background: #fff;&#10;    gap: 10px;&#10;}&#10;&#10;.message-input {&#10;    flex: 1;&#10;    border: 1px solid #ddd;&#10;    border-radius: 20px;&#10;    padding: 10px 15px;&#10;    font-size: 14px;&#10;    outline: none;&#10;    transition: border-color 0.2s;&#10;}&#10;&#10;.message-input:focus {&#10;    border-color: #EC5E95;&#10;}&#10;&#10;.send-btn {&#10;    background-color: #EC5E95;&#10;    color: white;&#10;    border: none;&#10;    border-radius: 20px;&#10;    padding: 10px 20px;&#10;    font-size: 14px;&#10;    font-weight: 500;&#10;    cursor: pointer;&#10;    transition: background-color 0.2s;&#10;}&#10;&#10;.send-btn:hover {&#10;    background-color: #d14d85;&#10;}&#10;&#10;.send-btn:disabled {&#10;    background-color: #ccc;&#10;    cursor: not-allowed;&#10;}&#10;&#10;/* Responsive */&#10;@media (max-width: 768px) {&#10;    .side-chat {&#10;        width: calc(100vw - 20px);&#10;        right: 10px;&#10;        left: 10px;&#10;        max-height: 75vh;&#10;    }&#10;&#10;    /* Adjust arrow position for tablet - extended to touch icon */&#10;    .side-chat::before {&#10;        right: 70px;&#10;        top: -24px;&#10;        border-bottom: 24px solid #e4e6ea;&#10;    }&#10;&#10;    .side-chat::after {&#10;        right: 70px;&#10;        top: -22px;&#10;        border-bottom: 22px solid #fff;&#10;    }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;    .side-chat {&#10;        width: calc(100vw - 16px);&#10;        right: 8px;&#10;        left: 8px;&#10;        top: 85px;&#10;        max-height: 80vh;&#10;    }&#10;&#10;    /* Adjust arrow position for mobile - extended to touch icon */&#10;    .side-chat::before {&#10;        right: 50px;&#10;        top: -24px;&#10;        border-bottom: 24px solid #e4e6ea;&#10;    }&#10;&#10;    .side-chat::after {&#10;        right: 50px;&#10;        top: -22px;&#10;        border-bottom: 22px solid #fff;&#10;    }&#10;&#10;    .chat-header {&#10;        padding: 12px 16px;&#10;    }&#10;&#10;    .friend-item {&#10;        padding: 8px 12px;&#10;    }&#10;}&#10;&#10;/* Dark mode support for chat */&#10;body.dark-mode .side-chat,&#10;body.dark-mode .chat-conversation {&#10;    background: #1a1a1a;&#10;    color: #fff;&#10;}&#10;&#10;/* Dark mode arrow colors */&#10;body.dark-mode .side-chat::before {&#10;    border-bottom-color: #333;&#10;}&#10;&#10;body.dark-mode .side-chat::after {&#10;    border-bottom-color: #1a1a1a;&#10;}&#10;&#10;body.dark-mode .chat-header,&#10;body.dark-mode .conversation-header {&#10;    background: #2d2d2d;&#10;    border-bottom-color: #333;&#10;}&#10;&#10;body.dark-mode .friend-item:hover {&#10;    background-color: #2d2d2d;&#10;}&#10;&#10;body.dark-mode .friend-item.active {&#10;    background-color: #2a1a2a;&#10;}&#10;&#10;body.dark-mode .friend-name,&#10;body.dark-mode .conversation-name {&#10;    color: #fff;&#10;}&#10;&#10;body.dark-mode .message-text {&#10;    background-color: #333;&#10;    color: #fff;&#10;}&#10;&#10;body.dark-mode .message.sent .message-text {&#10;    background-color: #EC5E95;&#10;}&#10;&#10;body.dark-mode .message-input {&#10;    background: #333;&#10;    border-color: #555;&#10;    color: #fff;&#10;}&#10;&#10;body.dark-mode .message-input-container {&#10;    background: #2d2d2d;&#10;    border-top-color: #333;&#10;}" />
              <option name="updatedContent" value="/* ===== FACEBOOK-STYLE CHAT POPUP ===== */&#13;&#10;.chat-popup-overlay {&#13;&#10;    position: fixed;&#13;&#10;    top: 0;&#13;&#10;    left: 0;&#13;&#10;    right: 0;&#13;&#10;    bottom: 0;&#13;&#10;    background: transparent;&#13;&#10;    z-index: 9998;&#13;&#10;    opacity: 0;&#13;&#10;    visibility: hidden;&#13;&#10;    transition: all 0.2s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-popup-overlay.is-active {&#13;&#10;    opacity: 1;&#13;&#10;    visibility: visible;&#13;&#10;}&#13;&#10;&#13;&#10;.side-chat {&#13;&#10;    position: fixed;&#13;&#10;    top: 95px;&#13;&#10;    right: 20px;&#13;&#10;    width: 360px;&#13;&#10;    max-height: 650px;&#13;&#10;    background: #fff;&#13;&#10;    border-radius: 8px;&#13;&#10;    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);&#13;&#10;    z-index: 10000;&#13;&#10;    display: flex;&#13;&#10;    flex-direction: column;&#13;&#10;    opacity: 0;&#13;&#10;    visibility: hidden;&#13;&#10;    transform: translateY(-10px) scale(0.95);&#13;&#10;    transition: all 0.2s cubic-bezier(0.2, 0, 0.2, 1);&#13;&#10;    border: 1px solid #e4e6ea;&#13;&#10;    will-change: transform, opacity;&#13;&#10;    /* Improve performance */&#13;&#10;}&#13;&#10;&#13;&#10;/* Speech bubble arrow pointing directly to chat icon */&#13;&#10;.side-chat::before {&#13;&#10;    content: '';&#13;&#10;    position: absolute;&#13;&#10;    top: -24px;&#13;&#10;    /* Extended to reach chat icon */&#13;&#10;    right: 272px;&#13;&#10;    width: 0;&#13;&#10;    height: 0;&#13;&#10;    border-left: 12px solid transparent;&#13;&#10;    border-right: 12px solid transparent;&#13;&#10;    border-bottom: 24px solid #e4e6ea;&#13;&#10;    /* Longer arrow to reach icon */&#13;&#10;    z-index: 10001;&#13;&#10;    opacity: 0;&#13;&#10;    transform: translateY(-5px);&#13;&#10;    transition: all 0.2s cubic-bezier(0.2, 0, 0.2, 1);&#13;&#10;    pointer-events: none;&#13;&#10;}&#13;&#10;&#13;&#10;.side-chat::after {&#13;&#10;    content: '';&#13;&#10;    position: absolute;&#13;&#10;    top: -22px;&#13;&#10;    /* Extended to reach chat icon */&#13;&#10;    right: 272px;&#13;&#10;    width: 0;&#13;&#10;    height: 0;&#13;&#10;    border-left: 12px solid transparent;&#13;&#10;    border-right: 12px solid transparent;&#13;&#10;    border-bottom: 22px solid #fff;&#13;&#10;    /* Longer arrow to reach icon */&#13;&#10;    z-index: 10002;&#13;&#10;    opacity: 0;&#13;&#10;    transform: translateY(-5px);&#13;&#10;    transition: all 0.2s cubic-bezier(0.2, 0, 0.2, 1);&#13;&#10;    pointer-events: none;&#13;&#10;}&#13;&#10;&#13;&#10;.side-chat.is-active {&#13;&#10;    opacity: 1;&#13;&#10;    visibility: visible;&#13;&#10;    transform: translateY(0) scale(1);&#13;&#10;}&#13;&#10;&#13;&#10;.side-chat.is-active::before,&#13;&#10;.side-chat.is-active::after {&#13;&#10;    opacity: 1;&#13;&#10;    transform: translateY(0);&#13;&#10;}&#13;&#10;&#13;&#10;.chat-header {&#13;&#10;    display: flex;&#13;&#10;    justify-content: space-between;&#13;&#10;    align-items: center;&#13;&#10;    padding: 16px 20px;&#13;&#10;    border-bottom: 1px solid #e4e6ea;&#13;&#10;    background: #fff;&#13;&#10;    border-radius: 8px 8px 0 0;&#13;&#10;    position: relative;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-header::before {&#13;&#10;    content: '';&#13;&#10;    position: absolute;&#13;&#10;    top: -1px;&#13;&#10;    left: -1px;&#13;&#10;    right: -1px;&#13;&#10;    height: 1px;&#13;&#10;    background: #e4e6ea;&#13;&#10;    border-radius: 8px 8px 0 0;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-header h3 {&#13;&#10;    margin: 0;&#13;&#10;    font-size: 18px;&#13;&#10;    font-weight: 600;&#13;&#10;    color: #333;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-close-btn {&#13;&#10;    background: none;&#13;&#10;    border: none;&#13;&#10;    font-size: 24px;&#13;&#10;    cursor: pointer;&#13;&#10;    color: #666;&#13;&#10;    padding: 0;&#13;&#10;    width: 30px;&#13;&#10;    height: 30px;&#13;&#10;    display: flex;&#13;&#10;    align-items: center;&#13;&#10;    justify-content: center;&#13;&#10;    border-radius: 50%;&#13;&#10;    transition: background-color 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-close-btn:hover {&#13;&#10;    background-color: #e9ecef;&#13;&#10;}&#13;&#10;&#13;&#10;/* Chat Search Box */&#13;&#10;.chat-search-box {&#13;&#10;    padding: 12px 16px;&#13;&#10;    border-bottom: 1px solid #e4e6ea;&#13;&#10;    background: #fff;&#13;&#10;    position: relative;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-search-input {&#13;&#10;    width: 100%;&#13;&#10;    padding: 10px 40px 10px 14px;&#13;&#10;    border: 1px solid #ddd;&#13;&#10;    border-radius: 20px;&#13;&#10;    font-size: 14px;&#13;&#10;    outline: none;&#13;&#10;    transition: border-color 0.2s;&#13;&#10;    background: #f0f2f5;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-search-input:focus {&#13;&#10;    border-color: #EC5E95;&#13;&#10;    background: #fff;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-search-input::placeholder {&#13;&#10;    color: #999;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-search-clear {&#13;&#10;    position: absolute;&#13;&#10;    right: 26px;&#13;&#10;    top: 50%;&#13;&#10;    transform: translateY(-50%);&#13;&#10;    background: none;&#13;&#10;    border: none;&#13;&#10;    color: #999;&#13;&#10;    cursor: pointer;&#13;&#10;    font-size: 20px;&#13;&#10;    padding: 4px;&#13;&#10;    width: 24px;&#13;&#10;    height: 24px;&#13;&#10;    display: flex;&#13;&#10;    align-items: center;&#13;&#10;    justify-content: center;&#13;&#10;    border-radius: 50%;&#13;&#10;    transition: all 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-search-clear:hover {&#13;&#10;    background: #e4e6ea;&#13;&#10;    color: #333;&#13;&#10;}&#13;&#10;&#13;&#10;.chat-friends-list {&#13;&#10;    flex: 1;&#13;&#10;    overflow-y: auto;&#13;&#10;    padding: 8px 0;&#13;&#10;    max-height: 550px;&#13;&#10;}&#13;&#10;&#13;&#10;.friend-item {&#13;&#10;    display: flex;&#13;&#10;    align-items: center;&#13;&#10;    padding: 10px 16px;&#13;&#10;    cursor: pointer;&#13;&#10;    transition: background-color 0.2s;&#13;&#10;    position: relative;&#13;&#10;    margin: 0 4px;&#13;&#10;    border-radius: 6px;&#13;&#10;}&#13;&#10;&#13;&#10;.friend-item:hover {&#13;&#10;    background-color: #f2f3f5;&#13;&#10;}&#13;&#10;&#13;&#10;.friend-item.active {&#13;&#10;    background-color: #e7f3ff;&#13;&#10;}&#13;&#10;&#13;&#10;.friend-avatar {&#13;&#10;    width: 40px;&#13;&#10;    height: 40px;&#13;&#10;    border-radius: 50%;&#13;&#10;    margin-right: 12px;&#13;&#10;    flex-shrink: 0;&#13;&#10;    object-fit: cover;&#13;&#10;    background: #f0f2f5;&#13;&#10;    border: 2px solid #fff;&#13;&#10;    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);&#13;&#10;}&#13;&#10;&#13;&#10;.friend-info {&#13;&#10;    flex: 1;&#13;&#10;    min-width: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.friend-name {&#13;&#10;    font-weight: 500;&#13;&#10;    color: #333;&#13;&#10;    font-size: 14px;&#13;&#10;    margin-bottom: 2px;&#13;&#10;}&#13;&#10;&#13;&#10;.friend-status {&#10;    font-size: 12px;&#10;    color: #666;&#10;}&#10;&#10;.message-time {&#10;    color: #65676b;&#10;    font-size: 11px;&#10;}&#13;&#10;&#13;&#10;/* Typing Indicator Inline (for friend list) */&#13;&#10;.typing-indicator-text {&#13;&#10;    display: inline-flex;&#13;&#10;    align-items: center;&#13;&#10;    gap: 4px;&#13;&#10;    color: #65676b;&#13;&#10;    font-style: italic;&#13;&#10;}&#13;&#10;&#13;&#10;.typing-dots-inline {&#13;&#10;    display: inline-flex;&#13;&#10;    gap: 2px;&#13;&#10;}&#13;&#10;&#13;&#10;.typing-dots-inline span {&#13;&#10;    animation: typingDots 1.4s infinite;&#13;&#10;    opacity: 0.4;&#13;&#10;}&#13;&#10;&#13;&#10;.typing-dots-inline span:nth-child(2) {&#13;&#10;    animation-delay: 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.typing-dots-inline span:nth-child(3) {&#13;&#10;    animation-delay: 0.4s;&#13;&#10;}&#13;&#10;&#13;&#10;@keyframes typingDots {&#13;&#10;    0%, 60%, 100% {&#13;&#10;        opacity: 0.4;&#13;&#10;    }&#13;&#10;    30% {&#13;&#10;        opacity: 1;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;/* Unread Count Badge */&#13;&#10;.unread-count {&#13;&#10;    background: #EC5E95;&#13;&#10;    color: white;&#13;&#10;    border-radius: 12px;&#13;&#10;    padding: 2px 8px;&#13;&#10;    font-size: 12px;&#13;&#10;    font-weight: 600;&#13;&#10;    min-width: 20px;&#13;&#10;    text-align: center;&#13;&#10;    margin-left: auto;&#13;&#10;}&#13;&#10;&#13;&#10;/* Chat Loading State */&#13;&#10;.chat-loading,&#13;&#10;.chat-empty {&#13;&#10;    padding: 20px;&#13;&#10;    text-align: center;&#13;&#10;    color: #65676b;&#13;&#10;    font-size: 14px;&#13;&#10;}&#13;&#10;&#13;&#10;/* Connection Status */&#13;&#10;.chat-connection-status {&#13;&#10;    display: flex;&#13;&#10;    align-items: center;&#13;&#10;    justify-content: center;&#13;&#10;    gap: 8px;&#13;&#10;    padding: 8px;&#13;&#10;    background: #fff3cd;&#13;&#10;    border-top: 1px solid #e4e6ea;&#13;&#10;    font-size: 12px;&#13;&#10;    color: #856404;&#13;&#10;}&#13;&#10;&#13;&#10;.connection-indicator {&#13;&#10;    width: 8px;&#13;&#10;    height: 8px;&#13;&#10;    border-radius: 50%;&#13;&#10;}&#13;&#10;&#13;&#10;.connection-indicator.online {&#13;&#10;    background: #31a24c;&#13;&#10;}&#13;&#10;&#13;&#10;.connection-indicator.offline {&#13;&#10;    background: #f02849;&#13;&#10;    animation: pulse 1.5s infinite;&#13;&#10;}&#13;&#10;&#13;&#10;@keyframes pulse {&#13;&#10;    0%, 100% {&#13;&#10;        opacity: 1;&#13;&#10;    }&#13;&#10;    50% {&#13;&#10;        opacity: 0.5;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;.chat-conversation {&#13;&#10;    display: none;&#13;&#10;    /* Ẩn conversation cũ vì đã sử dụng Facebook-style chat windows */&#13;&#10;}&#13;&#10;&#13;&#10;.chat-conversation.show {&#13;&#10;    display: none;&#13;&#10;    /* Ẩn conversation cũ */&#13;&#10;}&#13;&#10;&#13;&#10;.conversation-header {&#13;&#10;    display: flex;&#13;&#10;    align-items: center;&#13;&#10;    padding: 20px;&#13;&#10;    border-bottom: 1px solid #eee;&#13;&#10;    background: #f8f9fa;&#13;&#10;}&#13;&#10;&#13;&#10;.back-to-friends {&#13;&#10;    background: none;&#13;&#10;    border: none;&#13;&#10;    font-size: 20px;&#13;&#10;    cursor: pointer;&#13;&#10;    color: #666;&#13;&#10;    margin-right: 15px;&#13;&#10;    padding: 5px;&#13;&#10;    border-radius: 50%;&#13;&#10;    width: 30px;&#13;&#10;    height: 30px;&#13;&#10;    display: flex;&#13;&#10;    align-items: center;&#13;&#10;    justify-content: center;&#13;&#10;    transition: background-color 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.back-to-friends:hover {&#13;&#10;    background-color: #e9ecef;&#13;&#10;}&#13;&#10;&#13;&#10;.conversation-avatar {&#13;&#10;    width: 40px;&#13;&#10;    height: 40px;&#13;&#10;    border-radius: 50%;&#13;&#10;    margin-right: 12px;&#13;&#10;}&#13;&#10;&#13;&#10;.conversation-info {&#13;&#10;    flex: 1;&#13;&#10;}&#13;&#10;&#13;&#10;.conversation-name {&#13;&#10;    font-weight: 600;&#13;&#10;    color: #333;&#13;&#10;    font-size: 16px;&#13;&#10;    margin-bottom: 2px;&#13;&#10;}&#13;&#10;&#13;&#10;.conversation-status {&#13;&#10;    font-size: 12px;&#13;&#10;    color: #28a745;&#13;&#10;}&#13;&#10;&#13;&#10;.messages-container {&#13;&#10;    flex: 1;&#13;&#10;    overflow-y: auto;&#13;&#10;    padding: 15px;&#13;&#10;    display: flex;&#13;&#10;    flex-direction: column;&#13;&#10;    gap: 15px;&#13;&#10;}&#13;&#10;&#13;&#10;.message {&#13;&#10;    display: flex;&#13;&#10;    align-items: flex-end;&#13;&#10;    gap: 8px;&#13;&#10;}&#13;&#10;&#13;&#10;.message.sent {&#13;&#10;    flex-direction: row-reverse;&#13;&#10;}&#13;&#10;&#13;&#10;.message-avatar {&#13;&#10;    width: 30px;&#13;&#10;    height: 30px;&#13;&#10;    border-radius: 50%;&#13;&#10;    flex-shrink: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.message.sent .message-avatar {&#13;&#10;    display: none;&#13;&#10;}&#13;&#10;&#13;&#10;.message-content {&#13;&#10;    max-width: 70%;&#13;&#10;    display: flex;&#13;&#10;    flex-direction: column;&#13;&#10;    gap: 2px;&#13;&#10;}&#13;&#10;&#13;&#10;.message.sent .message-content {&#13;&#10;    align-items: flex-end;&#13;&#10;}&#13;&#10;&#13;&#10;.message-text {&#13;&#10;    background-color: #f1f3f4;&#13;&#10;    padding: 10px 14px;&#13;&#10;    border-radius: 18px;&#13;&#10;    font-size: 14px;&#13;&#10;    line-height: 1.4;&#13;&#10;    word-wrap: break-word;&#13;&#10;}&#13;&#10;&#13;&#10;.message.sent .message-text {&#13;&#10;    background-color: #EC5E95;&#13;&#10;    color: white;&#13;&#10;}&#13;&#10;&#13;&#10;.message-time {&#13;&#10;    font-size: 11px;&#13;&#10;    color: #666;&#13;&#10;    margin: 0 14px;&#13;&#10;}&#13;&#10;&#13;&#10;.message-input-container {&#13;&#10;    display: flex;&#13;&#10;    padding: 15px 20px;&#13;&#10;    border-top: 1px solid #eee;&#13;&#10;    background: #fff;&#13;&#10;    gap: 10px;&#13;&#10;}&#13;&#10;&#13;&#10;.message-input {&#13;&#10;    flex: 1;&#13;&#10;    border: 1px solid #ddd;&#13;&#10;    border-radius: 20px;&#13;&#10;    padding: 10px 15px;&#13;&#10;    font-size: 14px;&#13;&#10;    outline: none;&#13;&#10;    transition: border-color 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.message-input:focus {&#13;&#10;    border-color: #EC5E95;&#13;&#10;}&#13;&#10;&#13;&#10;.send-btn {&#13;&#10;    background-color: #EC5E95;&#13;&#10;    color: white;&#13;&#10;    border: none;&#13;&#10;    border-radius: 20px;&#13;&#10;    padding: 10px 20px;&#13;&#10;    font-size: 14px;&#13;&#10;    font-weight: 500;&#13;&#10;    cursor: pointer;&#13;&#10;    transition: background-color 0.2s;&#13;&#10;}&#13;&#10;&#13;&#10;.send-btn:hover {&#13;&#10;    background-color: #d14d85;&#13;&#10;}&#13;&#10;&#13;&#10;.send-btn:disabled {&#13;&#10;    background-color: #ccc;&#13;&#10;    cursor: not-allowed;&#13;&#10;}&#13;&#10;&#13;&#10;/* Responsive */&#13;&#10;@media (max-width: 768px) {&#13;&#10;    .side-chat {&#13;&#10;        width: calc(100vw - 20px);&#13;&#10;        right: 10px;&#13;&#10;        left: 10px;&#13;&#10;        max-height: 75vh;&#13;&#10;    }&#13;&#10;&#13;&#10;    /* Adjust arrow position for tablet - extended to touch icon */&#13;&#10;    .side-chat::before {&#13;&#10;        right: 70px;&#13;&#10;        top: -24px;&#13;&#10;        border-bottom: 24px solid #e4e6ea;&#13;&#10;    }&#13;&#10;&#13;&#10;    .side-chat::after {&#13;&#10;        right: 70px;&#13;&#10;        top: -22px;&#13;&#10;        border-bottom: 22px solid #fff;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 480px) {&#13;&#10;    .side-chat {&#13;&#10;        width: calc(100vw - 16px);&#13;&#10;        right: 8px;&#13;&#10;        left: 8px;&#13;&#10;        top: 85px;&#13;&#10;        max-height: 80vh;&#13;&#10;    }&#13;&#10;&#13;&#10;    /* Adjust arrow position for mobile - extended to touch icon */&#13;&#10;    .side-chat::before {&#13;&#10;        right: 50px;&#13;&#10;        top: -24px;&#13;&#10;        border-bottom: 24px solid #e4e6ea;&#13;&#10;    }&#13;&#10;&#13;&#10;    .side-chat::after {&#13;&#10;        right: 50px;&#13;&#10;        top: -22px;&#13;&#10;        border-bottom: 22px solid #fff;&#13;&#10;    }&#13;&#10;&#13;&#10;    .chat-header {&#13;&#10;        padding: 12px 16px;&#13;&#10;    }&#13;&#10;&#13;&#10;    .friend-item {&#13;&#10;        padding: 8px 12px;&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;/* Dark mode support for chat */&#13;&#10;body.dark-mode .side-chat,&#13;&#10;body.dark-mode .chat-conversation {&#13;&#10;    background: #1a1a1a;&#13;&#10;    color: #fff;&#13;&#10;}&#13;&#10;&#13;&#10;/* Dark mode arrow colors */&#13;&#10;body.dark-mode .side-chat::before {&#13;&#10;    border-bottom-color: #333;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .side-chat::after {&#13;&#10;    border-bottom-color: #1a1a1a;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .chat-header,&#13;&#10;body.dark-mode .conversation-header {&#13;&#10;    background: #2d2d2d;&#13;&#10;    border-bottom-color: #333;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .friend-item:hover {&#13;&#10;    background-color: #2d2d2d;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .friend-item.active {&#13;&#10;    background-color: #2a1a2a;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .friend-name,&#13;&#10;body.dark-mode .conversation-name {&#13;&#10;    color: #fff;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .message-text {&#13;&#10;    background-color: #333;&#13;&#10;    color: #fff;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .message.sent .message-text {&#13;&#10;    background-color: #EC5E95;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .message-input {&#13;&#10;    background: #333;&#13;&#10;    border-color: #555;&#13;&#10;    color: #fff;&#13;&#10;}&#13;&#10;&#13;&#10;body.dark-mode .message-input-container {&#13;&#10;    background: #2d2d2d;&#13;&#10;    border-top-color: #333;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/social-map-fe/src/components/Chat/SideChat.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/social-map-fe/src/components/Chat/SideChat.jsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';&#10;import './Chat.css';&#10;import './ChatWindows.css';&#10;import './LocationMessage.css';&#10;import ChatWindow from './ChatWindow';&#10;import { ChatService, webSocketService } from '../../services/ChatService';&#10;&#10;export default function SideChat() {&#10;    const [isChatOpen, setIsChatOpen] = useState(false);&#10;    const [activeFriend, setActiveFriend] = useState(null);&#10;    const [openChatWindows, setOpenChatWindows] = useState(new Map());&#10;    const [conversations, setConversations] = useState([]);&#10;    const [searchQuery, setSearchQuery] = useState('');&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [isConnected, setIsConnected] = useState(false);&#10;    const [currentUserId, setCurrentUserId] = useState(null);&#10;    const wsConnectedRef = useRef(false);&#10;    const conversationIdsRef = useRef(new Set()); // Track conversation IDs to detect new conversations&#10;&#10;    // Load conversations from backend&#10;    const loadConversations = useCallback(async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const data = await ChatService.getUserConversations();&#10;            // Parse location messages in lastMessage&#10;            const processedData = data.map(conv =&gt; {&#10;                if (conv.lastMessageContent?.startsWith('LOCATION:')) {&#10;                    return {&#10;                        ...conv,&#10;                        lastMessageContent: 'Vị trí'&#10;                    };&#10;                }&#10;                return conv;&#10;            }).map(conv =&gt; ({ ...conv, typingUsers: [] })); // Add typingUsers array&#10;            setConversations(processedData);&#10;        } catch (error) {&#10;            console.error('Failed to load conversations:', error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    }, []);&#10;&#10;    // Connect to WebSocket&#10;    useEffect(() =&gt; {&#10;        const conversationIdsRefCurrent = conversationIdsRef.current; // Copy ref for cleanup&#10;&#10;        if (!wsConnectedRef.current) {&#10;            webSocketService.connect(&#10;                () =&gt; {&#10;                    console.log('✅ WebSocket connected');&#10;                    setIsConnected(true);&#10;                    wsConnectedRef.current = true;&#10;&#10;                    // Lấy userId từ WebSocket service (đã được fetch từ backend)&#10;                    const userId = webSocketService.getCurrentUserId();&#10;                    setCurrentUserId(userId);&#10;&#10;                    // Subscribe to user queue for unread counts&#10;                    webSocketService.subscribeToUserQueue(&#10;                        (unreadDTO) =&gt; {&#10;                            // Update unread count for conversation&#10;                            setConversations(prev =&gt; prev.map(conv =&gt;&#10;                                conv.id === unreadDTO.conversationId&#10;                                    ? { ...conv, unreadCount: unreadDTO.count }&#10;                                    : conv&#10;                            ));&#10;                        },&#10;                        (error) =&gt; {&#10;                            console.error('WebSocket error:', error);&#10;                        }&#10;                    );&#10;&#10;                    // Subscribe to conversation updates&#10;                    webSocketService.subscribeToConversationUpdates(&#10;                        (updateDTO) =&gt; {&#10;                            // Update conversation with new last message and unread count&#10;                            let lastMessageContent = updateDTO.lastMessageContent;&#10;                            if (updateDTO.lastMessageContent?.startsWith('LOCATION:')) {&#10;                                lastMessageContent = 'Vị trí';&#10;                            }&#10;&#10;                            setConversations(prev =&gt; prev.map(conv =&gt;&#10;                                conv.id === updateDTO.conversationId&#10;                                    ? {&#10;                                        ...conv,&#10;                                        lastMessageContent: lastMessageContent,&#10;                                        lastMessageSenderId: updateDTO.lastMessageSenderId,&#10;                                        lastMessageAt: updateDTO.lastMessageAt,&#10;                                        unreadCount: updateDTO.unreadCount&#10;                                    }&#10;                                    : conv&#10;                            ));&#10;                        },&#10;                        (error) =&gt; {&#10;                            console.error('Conversation update error:', error);&#10;                        }&#10;                    );&#10;                },&#10;                (error) =&gt; {&#10;                    console.error('WebSocket connection failed:', error);&#10;                    setIsConnected(false);&#10;                    wsConnectedRef.current = false;&#10;                }&#10;            );&#10;        }&#10;&#10;        return () =&gt; {&#10;            if (wsConnectedRef.current) {&#10;                webSocketService.disconnect();&#10;                wsConnectedRef.current = false;&#10;                // Clear subscription tracking to force re-subscribe on next connect&#10;                conversationIdsRefCurrent.clear();&#10;                console.log(' WebSocket disconnected, cleared subscription tracking');&#10;            }&#10;        };&#10;    }, []);&#10;&#10;    // Load conversations on mount - CRITICAL: Load BEFORE subscribing&#10;    useEffect(() =&gt; {&#10;        console.log(' Loading conversations on mount');&#10;        loadConversations();&#10;    }, [loadConversations]);&#10;&#10;    // Subscribe to all conversations for both messages and typing&#10;    // Only re-run when isConnected changes, NOT when conversations state updates&#10;    useEffect(() =&gt; {&#10;        if (!isConnected) return;&#10;&#10;        console.log(' Subscribe effect running (on connection change):', {&#10;            isConnected,&#10;            trackedIds: Array.from(conversationIdsRef.current)&#10;        });&#10;&#10;        // This effect should NOT re-run when conversations state changes&#10;        // We'll use a separate effect to handle new conversations&#10;&#10;        // Cleanup when component unmounts or connection changes&#10;        return () =&gt; {&#10;            console.log(' Cleaning up all subscriptions due to unmount/disconnect');&#10;            // Clear all tracked IDs to force re-subscribe on reconnect&#10;            conversationIdsRef.current.clear();&#10;        };&#10;    }, [isConnected]);&#10;&#10;    // Separate effect to subscribe to NEW conversations when they appear&#10;    useEffect(() =&gt; {&#10;        console.log(' Effect 2 triggered:', {&#10;            isConnected,&#10;            conversationsLength: conversations.length,&#10;            trackedIds: Array.from(conversationIdsRef.current)&#10;        });&#10;&#10;        if (!isConnected) {&#10;            console.log('⏸️ Waiting for connection...');&#10;            return;&#10;        }&#10;&#10;        if (conversations.length === 0) {&#10;            console.log('⏸️ No conversations yet, waiting...');&#10;            return;&#10;        }&#10;&#10;        console.log('✅ Ready to subscribe! Processing conversations...');&#10;&#10;        let subscribedCount = 0;&#10;        let skippedCount = 0;&#10;&#10;        conversations.forEach(conv =&gt; {&#10;            // Only subscribe to NEW conversations (not already in ref)&#10;            if (conversationIdsRef.current.has(conv.id)) {&#10;                // Already subscribed, do nothing&#10;                console.log(`⏭️ Skipping ${conv.id} (already subscribed)`);&#10;                skippedCount++;&#10;                return;&#10;            }&#10;&#10;            console.log(` New conversation detected: ${conv.id}, will subscribe`);&#10;&#10;            // Create message callback with closure over conv.id&#10;            const messageCallback = (message) =&gt; {&#10;                console.log(' SideChat received new message for conv', conv.id, ':', message);&#10;&#10;                // Process location messages&#10;                let lastMessageContent = message.content;&#10;                if (message.content &amp;&amp; message.content.startsWith('LOCATION:')) {&#10;                    lastMessageContent = 'Vị trí';&#10;                } else if (message.isLocation) {&#10;                    lastMessageContent = 'Vị trí';&#10;                }&#10;&#10;                // Update conversation's last message&#10;                setConversations(prev =&gt; prev.map(c =&gt; {&#10;                    if (c.id === conv.id) {&#10;                        console.log(`✏️ Updating last message for conv ${conv.id}:`, lastMessageContent);&#10;                        return {&#10;                            ...c,&#10;                            lastMessageContent: lastMessageContent,&#10;                            lastMessageSenderId: message.senderId,&#10;                            lastMessageAt: message.timestamp || new Date().toISOString(),&#10;                        };&#10;                    }&#10;                    return c;&#10;                }));&#10;            };&#10;&#10;            // Create typing callback&#10;            const typingCallback = (typingDTO) =&gt; {&#10;                console.log(' SideChat received typing from WebSocket:', typingDTO);&#10;&#10;                // Handle both 'typing' and 'isTyping' field names from backend&#10;                const isTyping = typingDTO.typing ?? typingDTO.isTyping ?? false;&#10;&#10;                // Update typingUsers directly for THIS conversation&#10;                setConversations(prev =&gt; prev.map(c =&gt; {&#10;                    if (c.id === conv.id) {&#10;                        let newTypingUsers = [...(c.typingUsers || [])];&#10;&#10;                        if (isTyping) {&#10;                            // User started typing&#10;                            if (!newTypingUsers.includes(typingDTO.userId)) {&#10;                                newTypingUsers.push(typingDTO.userId);&#10;                                console.log(`✍️ User ${typingDTO.userId} started typing in conv ${conv.id}`);&#10;                            }&#10;                        } else {&#10;                            // User stopped typing&#10;                            newTypingUsers = newTypingUsers.filter(id =&gt; id !== typingDTO.userId);&#10;                            console.log(`⏹️ User ${typingDTO.userId} stopped typing in conv ${conv.id}`);&#10;                        }&#10;&#10;                        console.log(` Updated typingUsers for conv ${conv.id}:`, newTypingUsers);&#10;                        return { ...c, typingUsers: newTypingUsers };&#10;                    }&#10;                    return c;&#10;                }));&#10;&#10;                // Also dispatch event for ChatWindow to handle&#10;                window.dispatchEvent(new CustomEvent('typingStatus', {&#10;                    detail: { conversationId: conv.id, isTyping: isTyping, userId: typingDTO.userId }&#10;                }));&#10;            };&#10;&#10;            // Subscribe to messages AND typing for this conversation&#10;            webSocketService.subscribeToConversation(&#10;                conv.id,&#10;                messageCallback,&#10;                typingCallback,&#10;                null&#10;            );&#10;&#10;            // Mark as subscribed (IMPORTANT: callbacks will persist via WebSocketService)&#10;            conversationIdsRef.current.add(conv.id);&#10;            subscribedCount++;&#10;&#10;            console.log(` SideChat subscribed to conversation ${conv.id}`);&#10;        });&#10;&#10;        console.log(` Subscribe summary: ${subscribedCount} new, ${skippedCount} skipped, ${conversationIdsRef.current.size} total tracked`);&#10;&#10;        // NO cleanup function here - subscriptions persist across state updates&#10;        // Cleanup only happens in the isConnected effect above&#10;    }, [conversations, isConnected]);&#10;&#10;    // Listen for openChatWindow event from Profile Page&#10;    useEffect(() =&gt; {&#10;        const handleOpenChatWindow = (event) =&gt; {&#10;            const { conversation, minimized } = event.detail;&#10;&#10;            if (!conversation) return;&#10;&#10;            // Add to conversations list if not exists&#10;            setConversations(prev =&gt; {&#10;                const exists = prev.find(c =&gt; c.id === conversation.id);&#10;                if (!exists) {&#10;                    return [conversation, ...prev];&#10;                }&#10;                return prev;&#10;            });&#10;&#10;            // Open chat window&#10;            setOpenChatWindows(prev =&gt; {&#10;                const newMap = new Map(prev);&#10;                newMap.set(conversation.id, { ...conversation, minimized: minimized || false });&#10;                return newMap;&#10;            });&#10;&#10;            setActiveFriend(conversation.id);&#10;        };&#10;&#10;        window.addEventListener('openChatWindow', handleOpenChatWindow);&#10;&#10;        return () =&gt; {&#10;            window.removeEventListener('openChatWindow', handleOpenChatWindow);&#10;        };&#10;    }, []);&#10;&#10;    // Listen for typing status updates from ChatWindow&#10;    useEffect(() =&gt; {&#10;        const handleTypingStatus = (event) =&gt; {&#10;            const { conversationId, isTyping, userId } = event.detail;&#10;            console.log('SideChat handling typingStatus:', { conversationId, isTyping, userId });&#10;            setConversations(prev =&gt; prev.map(conv =&gt; {&#10;                if (conv.id === conversationId) {&#10;                    let newTypingUsers = [...conv.typingUsers];&#10;                    if (isTyping) {&#10;                        if (!newTypingUsers.includes(userId)) {&#10;                            newTypingUsers.push(userId);&#10;                        }&#10;                    } else {&#10;                        newTypingUsers = newTypingUsers.filter(id =&gt; id !== userId);&#10;                    }&#10;                    console.log('Updated typingUsers for conv', conv.id, ':', newTypingUsers);&#10;                    return { ...conv, typingUsers: newTypingUsers };&#10;                }&#10;                return conv;&#10;            }));&#10;        };&#10;&#10;        window.addEventListener('typingStatus', handleTypingStatus);&#10;&#10;        return () =&gt; {&#10;            window.removeEventListener('typingStatus', handleTypingStatus);&#10;        };&#10;    }, []);&#10;&#10;    const handleChatToggle = useCallback(() =&gt; {&#10;        setIsChatOpen(prev =&gt; !prev);&#10;    }, []);&#10;&#10;    const handleCloseChatPopup = useCallback(() =&gt; {&#10;        setIsChatOpen(false);&#10;    }, []);&#10;&#10;    const handleOverlayClick = useCallback(() =&gt; {&#10;        setIsChatOpen(false);&#10;    }, []);&#10;&#10;    const handleFriendClick = useCallback(async (conversation) =&gt; {&#10;        setActiveFriend(conversation.id);&#10;        setIsChatOpen(false);&#10;&#10;        // Mark as read&#10;        try {&#10;            await ChatService.markAsRead(conversation.id);&#10;            setConversations(prev =&gt; prev.map(conv =&gt;&#10;                conv.id === conversation.id ? { ...conv, unreadCount: 0 } : conv&#10;            ));&#10;        } catch (error) {&#10;            console.error('Failed to mark as read:', error);&#10;        }&#10;&#10;        // Open chat window&#10;        setOpenChatWindows(prev =&gt; {&#10;            const newMap = new Map(prev);&#10;            if (!newMap.has(conversation.id)) {&#10;                newMap.set(conversation.id, { ...conversation, minimized: false });&#10;            } else {&#10;                const existing = newMap.get(conversation.id);&#10;                newMap.set(conversation.id, { ...existing, minimized: false });&#10;            }&#10;            return newMap;&#10;        });&#10;    }, []);&#10;&#10;    const handleCloseChatWindow = useCallback((conversationId) =&gt; {&#10;        setOpenChatWindows(prev =&gt; {&#10;            const newMap = new Map(prev);&#10;            newMap.delete(conversationId);&#10;            return newMap;&#10;        });&#10;    }, []);&#10;&#10;    const handleMinimizeChatWindow = useCallback((conversationId) =&gt; {&#10;        setOpenChatWindows(prev =&gt; {&#10;            const newMap = new Map(prev);&#10;            const chatWindow = newMap.get(conversationId);&#10;            if (chatWindow) {&#10;                newMap.set(conversationId, { ...chatWindow, minimized: !chatWindow.minimized });&#10;            }&#10;            return newMap;&#10;        });&#10;    }, []);&#10;&#10;    // Handle new messages from WebSocket&#10;    const handleNewMessage = useCallback((conversationId, message) =&gt; {&#10;        let lastMessageContent = message.content;&#10;        if (message.content?.startsWith('LOCATION:')) {&#10;            lastMessageContent = 'Vị trí';&#10;        }&#10;&#10;        setConversations(prev =&gt; prev.map(conv =&gt; {&#10;            if (conv.id === conversationId) {&#10;                return {&#10;                    ...conv,&#10;                    lastMessageContent: lastMessageContent,&#10;                    lastMessageTime: message.timestamp,&#10;                    lastMessageSender: message.senderName,&#10;                };&#10;            }&#10;            return conv;&#10;        }));&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        const chatToggle = document.getElementById('chatToggle');&#10;        if (chatToggle) {&#10;            chatToggle.addEventListener('click', handleChatToggle);&#10;            return () =&gt; chatToggle.removeEventListener('click', handleChatToggle);&#10;        }&#10;    }, [handleChatToggle]);&#10;&#10;    useEffect(() =&gt; {&#10;        const handleEscape = (e) =&gt; {&#10;            if (e.key === 'Escape' &amp;&amp; isChatOpen) {&#10;                setIsChatOpen(false);&#10;            }&#10;        };&#10;&#10;        document.addEventListener('keydown', handleEscape);&#10;        return () =&gt; document.removeEventListener('keydown', handleEscape);&#10;    }, [isChatOpen]);&#10;&#10;    // Sort conversations by lastMessageAt (newest first) - REAL-TIME SORTING&#10;    const sortedConversations = useMemo(() =&gt; {&#10;        return [...conversations].sort((a, b) =&gt; {&#10;            // Handle null/undefined lastMessageAt&#10;            if (!a.lastMessageAt &amp;&amp; !b.lastMessageAt) return 0;&#10;            if (!a.lastMessageAt) return 1; // a goes to bottom&#10;            if (!b.lastMessageAt) return -1; // b goes to bottom&#10;&#10;            // Compare dates - newest first (descending order)&#10;            const dateA = new Date(a.lastMessageAt);&#10;            const dateB = new Date(b.lastMessageAt);&#10;            return dateB - dateA;&#10;        });&#10;    }, [conversations]);&#10;&#10;    // Filter conversations based on search query&#10;    const filteredConversations = sortedConversations.filter(conv =&gt; {&#10;        const displayName = conv.isGroup ? conv.groupName : conv.otherUser?.displayName || '';&#10;        return displayName.toLowerCase().includes(searchQuery.toLowerCase());&#10;    });&#10;&#10;    // Get display info for conversation&#10;    const getConversationDisplay = (conv) =&gt; {&#10;        if (conv.isGroup) {&#10;            return {&#10;                name: conv.groupName || 'Nhóm',&#10;                avatar: conv.groupAvatar || '/channels/myprofile.jpg',&#10;                status: `${conv.members?.length || 0} thành viên`,&#10;            };&#10;        } else {&#10;            const otherUser = conv.otherUser || conv.members?.find(m =&gt; m.userId !== currentUserId);&#10;            return {&#10;                name: otherUser?.fullName || 'User',&#10;                avatar: otherUser?.avatarUrl || '/channels/myprofile.jpg',&#10;                status: otherUser?.online ? 'Đang hoạt động' : 'Không hoạt động',&#10;            };&#10;        }&#10;    };&#10;&#10;    // Format last message display with truncation&#10;    const getLastMessageDisplay = (conv) =&gt; {&#10;        if (conv.typingUsers &amp;&amp; conv.typingUsers.length &gt; 0) {&#10;            return (&#10;                &lt;span className=&quot;typing-indicator-text&quot;&gt;&#10;                    &lt;span className=&quot;typing-dots-inline&quot;&gt;&#10;                        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#10;                    &lt;/span&gt;&#10;                    {' '}đang nhập&#10;                &lt;/span&gt;&#10;            );&#10;        }&#10;&#10;        if (conv.lastMessageContent) {&#10;            const prefix = conv.lastMessageSenderId === currentUserId ? 'Bạn: ' : '';&#10;            const maxLength = 30; // Maximum characters to display&#10;&#10;            let displayContent = conv.lastMessageContent;&#10;            if (displayContent.length &gt; maxLength) {&#10;                displayContent = displayContent.substring(0, maxLength) + '...';&#10;            }&#10;&#10;            return `${prefix}${displayContent}`;&#10;        }&#10;&#10;        return 'Bắt đầu trò chuyện';&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            {/* Chat Popup Overlay */}&#10;            &lt;div&#10;                className={`chat-popup-overlay ${isChatOpen ? 'is-active' : ''}`}&#10;                id=&quot;chatPopupOverlay&quot;&#10;                onClick={handleOverlayClick}&#10;                role=&quot;button&quot;&#10;                tabIndex={0}&#10;                onKeyDown={(e) =&gt; e.key === 'Enter' &amp;&amp; handleOverlayClick()}&#10;                aria-label=&quot;Close chat&quot;&#10;            /&gt;&#10;&#10;            {/* Side Chat */}&#10;            &lt;div className={`side-chat ${isChatOpen ? 'is-active' : ''}`} id=&quot;sideChat&quot;&gt;&#10;                &lt;div className=&quot;chat-header&quot;&gt;&#10;                    &lt;h3&gt;Đoạn chat&lt;/h3&gt;&#10;                    &lt;button className=&quot;chat-close-btn&quot; id=&quot;chatCloseBtn&quot; onClick={handleCloseChatPopup}&gt;×&lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Search Box */}&#10;                &lt;div className=&quot;chat-search-box&quot;&gt;&#10;                    &lt;input&#10;                        type=&quot;text&quot;&#10;                        placeholder=&quot;Tìm kiếm đoạn chat...&quot;&#10;                        value={searchQuery}&#10;                        onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;                        className=&quot;chat-search-input&quot;&#10;                    /&gt;&#10;                    {searchQuery &amp;&amp; (&#10;                        &lt;button&#10;                            className=&quot;chat-search-clear&quot;&#10;                            onClick={() =&gt; setSearchQuery('')}&#10;                        &gt;&#10;                            ×&#10;                        &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;chat-friends-list&quot;&gt;&#10;                    {isLoading ? (&#10;                        &lt;div className=&quot;chat-loading&quot;&gt;Đang tải...&lt;/div&gt;&#10;                    ) : filteredConversations.length === 0 ? (&#10;                        &lt;div className=&quot;chat-empty&quot;&gt;Không có đoạn chat nào&lt;/div&gt;&#10;                    ) : (&#10;                        filteredConversations.map((conv) =&gt; {&#10;                            const display = getConversationDisplay(conv);&#10;                            return (&#10;                                &lt;div&#10;                                    key={conv.id}&#10;                                    className={`friend-item ${activeFriend === conv.id ? 'active' : ''}`}&#10;                                    onClick={() =&gt; handleFriendClick(conv)}&#10;                                    role=&quot;button&quot;&#10;                                    tabIndex={0}&#10;                                    onKeyDown={(e) =&gt; e.key === 'Enter' &amp;&amp; handleFriendClick(conv)}&#10;                                    data-friend={conv.id}&#10;                                &gt;&#10;                                    &lt;img src={display.avatar} alt=&quot;Avatar&quot; className=&quot;friend-avatar&quot; /&gt;&#10;                                    &lt;div className=&quot;friend-info&quot;&gt;&#10;                                        &lt;div className=&quot;friend-name&quot;&gt;{display.name}&lt;/div&gt;&#10;                                        &lt;div className=&quot;friend-status&quot;&gt;&#10;                                            {getLastMessageDisplay(conv)}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    {conv.unreadCount &gt; 0 &amp;&amp; (&#10;                                        &lt;div className=&quot;unread-count&quot;&gt;{conv.unreadCount}&lt;/div&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            );&#10;                        })&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {!isConnected &amp;&amp; (&#10;                    &lt;div className=&quot;chat-connection-status&quot;&gt;&#10;                        &lt;span className=&quot;connection-indicator offline&quot;&gt;●&lt;/span&gt;&#10;                        {' '}Đang kết nối lại...&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Chat Windows Container */}&#10;            &lt;div className=&quot;chat-windows-container&quot; id=&quot;chatWindowsContainer&quot;&gt;&#10;                {Array.from(openChatWindows.entries()).map(([conversationId, chatData]) =&gt; {&#10;                    const conversation = conversations.find(c =&gt; c.id === conversationId) || chatData;&#10;                    return (&#10;                        &lt;ChatWindow&#10;                            key={conversationId}&#10;                            conversation={conversation}&#10;                            minimized={chatData.minimized}&#10;                            currentUserId={currentUserId}&#10;                            unreadCount={conversation.unreadCount || 0}&#10;                            onClose={() =&gt; handleCloseChatWindow(conversationId)}&#10;                            onMinimize={() =&gt; handleMinimizeChatWindow(conversationId)}&#10;                            onNewMessage={(message) =&gt; handleNewMessage(conversationId, message)}&#10;                        /&gt;&#10;                    );&#10;                })}&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';&#10;import './Chat.css';&#10;import './ChatWindows.css';&#10;import './LocationMessage.css';&#10;import ChatWindow from './ChatWindow';&#10;import { ChatService, webSocketService } from '../../services/ChatService';&#10;&#10;export default function SideChat() {&#10;    const [isChatOpen, setIsChatOpen] = useState(false);&#10;    const [activeFriend, setActiveFriend] = useState(null);&#10;    const [openChatWindows, setOpenChatWindows] = useState(new Map());&#10;    const [conversations, setConversations] = useState([]);&#10;    const [searchQuery, setSearchQuery] = useState('');&#10;    const [isLoading, setIsLoading] = useState(false);&#10;    const [isConnected, setIsConnected] = useState(false);&#10;    const [currentUserId, setCurrentUserId] = useState(null);&#10;    const wsConnectedRef = useRef(false);&#10;    const conversationIdsRef = useRef(new Set()); // Track conversation IDs to detect new conversations&#10;&#10;    // Load conversations from backend&#10;    const loadConversations = useCallback(async () =&gt; {&#10;        try {&#10;            setIsLoading(true);&#10;            const data = await ChatService.getUserConversations();&#10;            // Parse location messages in lastMessage&#10;            const processedData = data.map(conv =&gt; {&#10;                if (conv.lastMessageContent?.startsWith('LOCATION:')) {&#10;                    return {&#10;                        ...conv,&#10;                        lastMessageContent: 'Vị trí'&#10;                    };&#10;                }&#10;                return conv;&#10;            }).map(conv =&gt; ({ ...conv, typingUsers: [] })); // Add typingUsers array&#10;            setConversations(processedData);&#10;        } catch (error) {&#10;            console.error('Failed to load conversations:', error);&#10;        } finally {&#10;            setIsLoading(false);&#10;        }&#10;    }, []);&#10;&#10;    // Connect to WebSocket&#10;    useEffect(() =&gt; {&#10;        const conversationIdsRefCurrent = conversationIdsRef.current; // Copy ref for cleanup&#10;&#10;        if (!wsConnectedRef.current) {&#10;            webSocketService.connect(&#10;                () =&gt; {&#10;                    console.log('✅ WebSocket connected');&#10;                    setIsConnected(true);&#10;                    wsConnectedRef.current = true;&#10;&#10;                    // Lấy userId từ WebSocket service (đã được fetch từ backend)&#10;                    const userId = webSocketService.getCurrentUserId();&#10;                    setCurrentUserId(userId);&#10;&#10;                    // Subscribe to user queue for unread counts&#10;                    webSocketService.subscribeToUserQueue(&#10;                        (unreadDTO) =&gt; {&#10;                            // Update unread count for conversation&#10;                            setConversations(prev =&gt; prev.map(conv =&gt;&#10;                                conv.id === unreadDTO.conversationId&#10;                                    ? { ...conv, unreadCount: unreadDTO.count }&#10;                                    : conv&#10;                            ));&#10;                        },&#10;                        (error) =&gt; {&#10;                            console.error('WebSocket error:', error);&#10;                        }&#10;                    );&#10;&#10;                    // Subscribe to conversation updates&#10;                    webSocketService.subscribeToConversationUpdates(&#10;                        (updateDTO) =&gt; {&#10;                            // Update conversation with new last message and unread count&#10;                            let lastMessageContent = updateDTO.lastMessageContent;&#10;                            if (updateDTO.lastMessageContent?.startsWith('LOCATION:')) {&#10;                                lastMessageContent = 'Vị trí';&#10;                            }&#10;&#10;                            setConversations(prev =&gt; prev.map(conv =&gt;&#10;                                conv.id === updateDTO.conversationId&#10;                                    ? {&#10;                                        ...conv,&#10;                                        lastMessageContent: lastMessageContent,&#10;                                        lastMessageSenderId: updateDTO.lastMessageSenderId,&#10;                                        lastMessageAt: updateDTO.lastMessageAt,&#10;                                        unreadCount: updateDTO.unreadCount&#10;                                    }&#10;                                    : conv&#10;                            ));&#10;                        },&#10;                        (error) =&gt; {&#10;                            console.error('Conversation update error:', error);&#10;                        }&#10;                    );&#10;                },&#10;                (error) =&gt; {&#10;                    console.error('WebSocket connection failed:', error);&#10;                    setIsConnected(false);&#10;                    wsConnectedRef.current = false;&#10;                }&#10;            );&#10;        }&#10;&#10;        return () =&gt; {&#10;            if (wsConnectedRef.current) {&#10;                webSocketService.disconnect();&#10;                wsConnectedRef.current = false;&#10;                // Clear subscription tracking to force re-subscribe on next connect&#10;                conversationIdsRefCurrent.clear();&#10;                console.log(' WebSocket disconnected, cleared subscription tracking');&#10;            }&#10;        };&#10;    }, []);&#10;&#10;    // Load conversations on mount - CRITICAL: Load BEFORE subscribing&#10;    useEffect(() =&gt; {&#10;        console.log(' Loading conversations on mount');&#10;        loadConversations();&#10;    }, [loadConversations]);&#10;&#10;    // Subscribe to all conversations for both messages and typing&#10;    // Only re-run when isConnected changes, NOT when conversations state updates&#10;    useEffect(() =&gt; {&#10;        if (!isConnected) return;&#10;&#10;        console.log(' Subscribe effect running (on connection change):', {&#10;            isConnected,&#10;            trackedIds: Array.from(conversationIdsRef.current)&#10;        });&#10;&#10;        // This effect should NOT re-run when conversations state changes&#10;        // We'll use a separate effect to handle new conversations&#10;&#10;        // Cleanup when component unmounts or connection changes&#10;        return () =&gt; {&#10;            console.log(' Cleaning up all subscriptions due to unmount/disconnect');&#10;            // Clear all tracked IDs to force re-subscribe on reconnect&#10;            conversationIdsRef.current.clear();&#10;        };&#10;    }, [isConnected]);&#10;&#10;    // Separate effect to subscribe to NEW conversations when they appear&#10;    useEffect(() =&gt; {&#10;        console.log(' Effect 2 triggered:', {&#10;            isConnected,&#10;            conversationsLength: conversations.length,&#10;            trackedIds: Array.from(conversationIdsRef.current)&#10;        });&#10;&#10;        if (!isConnected) {&#10;            console.log('⏸️ Waiting for connection...');&#10;            return;&#10;        }&#10;&#10;        if (conversations.length === 0) {&#10;            console.log('⏸️ No conversations yet, waiting...');&#10;            return;&#10;        }&#10;&#10;        console.log('✅ Ready to subscribe! Processing conversations...');&#10;&#10;        let subscribedCount = 0;&#10;        let skippedCount = 0;&#10;&#10;        conversations.forEach(conv =&gt; {&#10;            // Only subscribe to NEW conversations (not already in ref)&#10;            if (conversationIdsRef.current.has(conv.id)) {&#10;                // Already subscribed, do nothing&#10;                console.log(`⏭️ Skipping ${conv.id} (already subscribed)`);&#10;                skippedCount++;&#10;                return;&#10;            }&#10;&#10;            console.log(` New conversation detected: ${conv.id}, will subscribe`);&#10;&#10;            // Create message callback with closure over conv.id&#10;            const messageCallback = (message) =&gt; {&#10;                console.log(' SideChat received new message for conv', conv.id, ':', message);&#10;&#10;                // Process location messages&#10;                let lastMessageContent = message.content;&#10;                if (message.content &amp;&amp; message.content.startsWith('LOCATION:')) {&#10;                    lastMessageContent = 'Vị trí';&#10;                } else if (message.isLocation) {&#10;                    lastMessageContent = 'Vị trí';&#10;                }&#10;&#10;                // Update conversation's last message&#10;                setConversations(prev =&gt; prev.map(c =&gt; {&#10;                    if (c.id === conv.id) {&#10;                        console.log(`✏️ Updating last message for conv ${conv.id}:`, lastMessageContent);&#10;                        return {&#10;                            ...c,&#10;                            lastMessageContent: lastMessageContent,&#10;                            lastMessageSenderId: message.senderId,&#10;                            lastMessageAt: message.timestamp || new Date().toISOString(),&#10;                        };&#10;                    }&#10;                    return c;&#10;                }));&#10;            };&#10;&#10;            // Create typing callback&#10;            const typingCallback = (typingDTO) =&gt; {&#10;                console.log(' SideChat received typing from WebSocket:', typingDTO);&#10;&#10;                // Handle both 'typing' and 'isTyping' field names from backend&#10;                const isTyping = typingDTO.typing ?? typingDTO.isTyping ?? false;&#10;&#10;                // Update typingUsers directly for THIS conversation&#10;                setConversations(prev =&gt; prev.map(c =&gt; {&#10;                    if (c.id === conv.id) {&#10;                        let newTypingUsers = [...(c.typingUsers || [])];&#10;&#10;                        if (isTyping) {&#10;                            // User started typing&#10;                            if (!newTypingUsers.includes(typingDTO.userId)) {&#10;                                newTypingUsers.push(typingDTO.userId);&#10;                                console.log(`✍️ User ${typingDTO.userId} started typing in conv ${conv.id}`);&#10;                            }&#10;                        } else {&#10;                            // User stopped typing&#10;                            newTypingUsers = newTypingUsers.filter(id =&gt; id !== typingDTO.userId);&#10;                            console.log(`⏹️ User ${typingDTO.userId} stopped typing in conv ${conv.id}`);&#10;                        }&#10;&#10;                        console.log(` Updated typingUsers for conv ${conv.id}:`, newTypingUsers);&#10;                        return { ...c, typingUsers: newTypingUsers };&#10;                    }&#10;                    return c;&#10;                }));&#10;&#10;                // Also dispatch event for ChatWindow to handle&#10;                window.dispatchEvent(new CustomEvent('typingStatus', {&#10;                    detail: { conversationId: conv.id, isTyping: isTyping, userId: typingDTO.userId }&#10;                }));&#10;            };&#10;&#10;            // Subscribe to messages AND typing for this conversation&#10;            webSocketService.subscribeToConversation(&#10;                conv.id,&#10;                messageCallback,&#10;                typingCallback,&#10;                null&#10;            );&#10;&#10;            // Mark as subscribed (IMPORTANT: callbacks will persist via WebSocketService)&#10;            conversationIdsRef.current.add(conv.id);&#10;            subscribedCount++;&#10;&#10;            console.log(` SideChat subscribed to conversation ${conv.id}`);&#10;        });&#10;&#10;        console.log(` Subscribe summary: ${subscribedCount} new, ${skippedCount} skipped, ${conversationIdsRef.current.size} total tracked`);&#10;&#10;        // NO cleanup function here - subscriptions persist across state updates&#10;        // Cleanup only happens in the isConnected effect above&#10;    }, [conversations, isConnected]);&#10;&#10;    // Listen for openChatWindow event from Profile Page&#10;    useEffect(() =&gt; {&#10;        const handleOpenChatWindow = (event) =&gt; {&#10;            const { conversation, minimized } = event.detail;&#10;&#10;            if (!conversation) return;&#10;&#10;            // Add to conversations list if not exists&#10;            setConversations(prev =&gt; {&#10;                const exists = prev.find(c =&gt; c.id === conversation.id);&#10;                if (!exists) {&#10;                    return [conversation, ...prev];&#10;                }&#10;                return prev;&#10;            });&#10;&#10;            // Open chat window&#10;            setOpenChatWindows(prev =&gt; {&#10;                const newMap = new Map(prev);&#10;                newMap.set(conversation.id, { ...conversation, minimized: minimized || false });&#10;                return newMap;&#10;            });&#10;&#10;            setActiveFriend(conversation.id);&#10;        };&#10;&#10;        window.addEventListener('openChatWindow', handleOpenChatWindow);&#10;&#10;        return () =&gt; {&#10;            window.removeEventListener('openChatWindow', handleOpenChatWindow);&#10;        };&#10;    }, []);&#10;&#10;    // Listen for typing status updates from ChatWindow&#10;    useEffect(() =&gt; {&#10;        const handleTypingStatus = (event) =&gt; {&#10;            const { conversationId, isTyping, userId } = event.detail;&#10;            console.log('SideChat handling typingStatus:', { conversationId, isTyping, userId });&#10;            setConversations(prev =&gt; prev.map(conv =&gt; {&#10;                if (conv.id === conversationId) {&#10;                    let newTypingUsers = [...conv.typingUsers];&#10;                    if (isTyping) {&#10;                        if (!newTypingUsers.includes(userId)) {&#10;                            newTypingUsers.push(userId);&#10;                        }&#10;                    } else {&#10;                        newTypingUsers = newTypingUsers.filter(id =&gt; id !== userId);&#10;                    }&#10;                    console.log('Updated typingUsers for conv', conv.id, ':', newTypingUsers);&#10;                    return { ...conv, typingUsers: newTypingUsers };&#10;                }&#10;                return conv;&#10;            }));&#10;        };&#10;&#10;        window.addEventListener('typingStatus', handleTypingStatus);&#10;&#10;        return () =&gt; {&#10;            window.removeEventListener('typingStatus', handleTypingStatus);&#10;        };&#10;    }, []);&#10;&#10;    const handleChatToggle = useCallback(() =&gt; {&#10;        setIsChatOpen(prev =&gt; !prev);&#10;    }, []);&#10;&#10;    const handleCloseChatPopup = useCallback(() =&gt; {&#10;        setIsChatOpen(false);&#10;    }, []);&#10;&#10;    const handleOverlayClick = useCallback(() =&gt; {&#10;        setIsChatOpen(false);&#10;    }, []);&#10;&#10;    const handleFriendClick = useCallback(async (conversation) =&gt; {&#10;        setActiveFriend(conversation.id);&#10;        setIsChatOpen(false);&#10;&#10;        // Mark as read&#10;        try {&#10;            await ChatService.markAsRead(conversation.id);&#10;            setConversations(prev =&gt; prev.map(conv =&gt;&#10;                conv.id === conversation.id ? { ...conv, unreadCount: 0 } : conv&#10;            ));&#10;        } catch (error) {&#10;            console.error('Failed to mark as read:', error);&#10;        }&#10;&#10;        // Open chat window&#10;        setOpenChatWindows(prev =&gt; {&#10;            const newMap = new Map(prev);&#10;            if (!newMap.has(conversation.id)) {&#10;                newMap.set(conversation.id, { ...conversation, minimized: false });&#10;            } else {&#10;                const existing = newMap.get(conversation.id);&#10;                newMap.set(conversation.id, { ...existing, minimized: false });&#10;            }&#10;            return newMap;&#10;        });&#10;    }, []);&#10;&#10;    const handleCloseChatWindow = useCallback((conversationId) =&gt; {&#10;        setOpenChatWindows(prev =&gt; {&#10;            const newMap = new Map(prev);&#10;            newMap.delete(conversationId);&#10;            return newMap;&#10;        });&#10;    }, []);&#10;&#10;    const handleMinimizeChatWindow = useCallback((conversationId) =&gt; {&#10;        setOpenChatWindows(prev =&gt; {&#10;            const newMap = new Map(prev);&#10;            const chatWindow = newMap.get(conversationId);&#10;            if (chatWindow) {&#10;                newMap.set(conversationId, { ...chatWindow, minimized: !chatWindow.minimized });&#10;            }&#10;            return newMap;&#10;        });&#10;    }, []);&#10;&#10;    // Handle new messages from WebSocket&#10;    const handleNewMessage = useCallback((conversationId, message) =&gt; {&#10;        let lastMessageContent = message.content;&#10;        if (message.content?.startsWith('LOCATION:')) {&#10;            lastMessageContent = 'Vị trí';&#10;        }&#10;&#10;        setConversations(prev =&gt; prev.map(conv =&gt; {&#10;            if (conv.id === conversationId) {&#10;                return {&#10;                    ...conv,&#10;                    lastMessageContent: lastMessageContent,&#10;                    lastMessageTime: message.timestamp,&#10;                    lastMessageSender: message.senderName,&#10;                };&#10;            }&#10;            return conv;&#10;        }));&#10;    }, []);&#10;&#10;    useEffect(() =&gt; {&#10;        const chatToggle = document.getElementById('chatToggle');&#10;        if (chatToggle) {&#10;            chatToggle.addEventListener('click', handleChatToggle);&#10;            return () =&gt; chatToggle.removeEventListener('click', handleChatToggle);&#10;        }&#10;    }, [handleChatToggle]);&#10;&#10;    useEffect(() =&gt; {&#10;        const handleEscape = (e) =&gt; {&#10;            if (e.key === 'Escape' &amp;&amp; isChatOpen) {&#10;                setIsChatOpen(false);&#10;            }&#10;        };&#10;&#10;        document.addEventListener('keydown', handleEscape);&#10;        return () =&gt; document.removeEventListener('keydown', handleEscape);&#10;    }, [isChatOpen]);&#10;&#10;    // Sort conversations by lastMessageAt (newest first) - REAL-TIME SORTING&#10;    const sortedConversations = useMemo(() =&gt; {&#10;        return [...conversations].sort((a, b) =&gt; {&#10;            // Handle null/undefined lastMessageAt&#10;            if (!a.lastMessageAt &amp;&amp; !b.lastMessageAt) return 0;&#10;            if (!a.lastMessageAt) return 1; // a goes to bottom&#10;            if (!b.lastMessageAt) return -1; // b goes to bottom&#10;&#10;            // Compare dates - newest first (descending order)&#10;            const dateA = new Date(a.lastMessageAt);&#10;            const dateB = new Date(b.lastMessageAt);&#10;            return dateB - dateA;&#10;        });&#10;    }, [conversations]);&#10;&#10;    // Filter conversations based on search query&#10;    const filteredConversations = sortedConversations.filter(conv =&gt; {&#10;        const displayName = conv.isGroup ? conv.groupName : conv.otherUser?.displayName || '';&#10;        return displayName.toLowerCase().includes(searchQuery.toLowerCase());&#10;    });&#10;&#10;    // Get display info for conversation&#10;    const getConversationDisplay = (conv) =&gt; {&#10;        if (conv.isGroup) {&#10;            return {&#10;                name: conv.groupName || 'Nhóm',&#10;                avatar: conv.groupAvatar || '/channels/myprofile.jpg',&#10;                status: `${conv.members?.length || 0} thành viên`,&#10;            };&#10;        } else {&#10;            const otherUser = conv.otherUser || conv.members?.find(m =&gt; m.userId !== currentUserId);&#10;            return {&#10;                name: otherUser?.fullName || 'User',&#10;                avatar: otherUser?.avatarUrl || '/channels/myprofile.jpg',&#10;                status: otherUser?.online ? 'Đang hoạt động' : 'Không hoạt động',&#10;            };&#10;        }&#10;    };&#10;&#10;    // Format last message display with truncation&#10;    const getLastMessageDisplay = (conv) =&gt; {&#10;        if (conv.typingUsers &amp;&amp; conv.typingUsers.length &gt; 0) {&#10;            return (&#10;                &lt;span className=&quot;typing-indicator-text&quot;&gt;&#10;                    &lt;span className=&quot;typing-dots-inline&quot;&gt;&#10;                        &lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&#10;                    &lt;/span&gt;&#10;                    {' '}đang nhập&#10;                &lt;/span&gt;&#10;            );&#10;        }&#10;&#10;        if (conv.lastMessageContent) {&#10;            const prefix = conv.lastMessageSenderId === currentUserId ? 'Bạn: ' : '';&#10;            const maxLength = 30; // Maximum characters to display&#10;&#10;            let displayContent = conv.lastMessageContent;&#10;            if (displayContent.length &gt; maxLength) {&#10;                displayContent = displayContent.substring(0, maxLength) + '...';&#10;            }&#10;&#10;            return `${prefix}${displayContent}`;&#10;        }&#10;&#10;        return 'Bắt đầu trò chuyện';&#10;    };&#10;&#10;    // Format time ago like Facebook (e.g., &quot;6 giờ&quot;, &quot;2 phút&quot;, &quot;vừa xong&quot;)&#10;    const formatTimeAgo = (timestamp) =&gt; {&#10;        if (!timestamp) return '';&#10;&#10;        const now = new Date();&#10;        const messageTime = new Date(timestamp);&#10;        const diffInSeconds = Math.floor((now - messageTime) / 1000);&#10;&#10;        if (diffInSeconds &lt; 60) {&#10;            return 'vừa xong';&#10;        }&#10;&#10;        const diffInMinutes = Math.floor(diffInSeconds / 60);&#10;        if (diffInMinutes &lt; 60) {&#10;            return `${diffInMinutes} phút`;&#10;        }&#10;&#10;        const diffInHours = Math.floor(diffInMinutes / 60);&#10;        if (diffInHours &lt; 24) {&#10;            return `${diffInHours} giờ`;&#10;        }&#10;&#10;        const diffInDays = Math.floor(diffInHours / 24);&#10;        if (diffInDays &lt; 7) {&#10;            return `${diffInDays} ngày`;&#10;        }&#10;&#10;        const diffInWeeks = Math.floor(diffInDays / 7);&#10;        if (diffInWeeks &lt; 4) {&#10;            return `${diffInWeeks} tuần`;&#10;        }&#10;&#10;        // For messages older than 4 weeks, show date&#10;        return messageTime.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });&#10;    };&#10;&#10;    return (&#10;        &lt;&gt;&#10;            {/* Chat Popup Overlay */}&#10;            &lt;div&#10;                className={`chat-popup-overlay ${isChatOpen ? 'is-active' : ''}`}&#10;                id=&quot;chatPopupOverlay&quot;&#10;                onClick={handleOverlayClick}&#10;                role=&quot;button&quot;&#10;                tabIndex={0}&#10;                onKeyDown={(e) =&gt; e.key === 'Enter' &amp;&amp; handleOverlayClick()}&#10;                aria-label=&quot;Close chat&quot;&#10;            /&gt;&#10;&#10;            {/* Side Chat */}&#10;            &lt;div className={`side-chat ${isChatOpen ? 'is-active' : ''}`} id=&quot;sideChat&quot;&gt;&#10;                &lt;div className=&quot;chat-header&quot;&gt;&#10;                    &lt;h3&gt;Đoạn chat&lt;/h3&gt;&#10;                    &lt;button className=&quot;chat-close-btn&quot; id=&quot;chatCloseBtn&quot; onClick={handleCloseChatPopup}&gt;×&lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Search Box */}&#10;                &lt;div className=&quot;chat-search-box&quot;&gt;&#10;                    &lt;input&#10;                        type=&quot;text&quot;&#10;                        placeholder=&quot;Tìm kiếm đoạn chat...&quot;&#10;                        value={searchQuery}&#10;                        onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;                        className=&quot;chat-search-input&quot;&#10;                    /&gt;&#10;                    {searchQuery &amp;&amp; (&#10;                        &lt;button&#10;                            className=&quot;chat-search-clear&quot;&#10;                            onClick={() =&gt; setSearchQuery('')}&#10;                        &gt;&#10;                            ×&#10;                        &lt;/button&gt;&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;chat-friends-list&quot;&gt;&#10;                    {isLoading ? (&#10;                        &lt;div className=&quot;chat-loading&quot;&gt;Đang tải...&lt;/div&gt;&#10;                    ) : filteredConversations.length === 0 ? (&#10;                        &lt;div className=&quot;chat-empty&quot;&gt;Không có đoạn chat nào&lt;/div&gt;&#10;                    ) : (&#10;                        filteredConversations.map((conv) =&gt; {&#10;                            const display = getConversationDisplay(conv);&#10;                            return (&#10;                                &lt;div&#10;                                    key={conv.id}&#10;                                    className={`friend-item ${activeFriend === conv.id ? 'active' : ''}`}&#10;                                    onClick={() =&gt; handleFriendClick(conv)}&#10;                                    role=&quot;button&quot;&#10;                                    tabIndex={0}&#10;                                    onKeyDown={(e) =&gt; e.key === 'Enter' &amp;&amp; handleFriendClick(conv)}&#10;                                    data-friend={conv.id}&#10;                                &gt;&#10;                                    &lt;img src={display.avatar} alt=&quot;Avatar&quot; className=&quot;friend-avatar&quot; /&gt;&#10;                                    &lt;div className=&quot;friend-info&quot;&gt;&#10;                                        &lt;div className=&quot;friend-name&quot;&gt;{display.name}&lt;/div&gt;&#10;                                        &lt;div className=&quot;friend-status&quot;&gt;&#10;                                            {getLastMessageDisplay(conv)}&#10;                                            {conv.lastMessageAt &amp;&amp; conv.lastMessageContent &amp;&amp; (&#10;                                                &lt;span className=&quot;message-time&quot;&gt; · {formatTimeAgo(conv.lastMessageAt)}&lt;/span&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                    {conv.unreadCount &gt; 0 &amp;&amp; (&#10;                                        &lt;div className=&quot;unread-count&quot;&gt;{conv.unreadCount}&lt;/div&gt;&#10;                                    )}&#10;                                &lt;/div&gt;&#10;                            );&#10;                        })&#10;                    )}&#10;                &lt;/div&gt;&#10;&#10;                {!isConnected &amp;&amp; (&#10;                    &lt;div className=&quot;chat-connection-status&quot;&gt;&#10;                        &lt;span className=&quot;connection-indicator offline&quot;&gt;●&lt;/span&gt;&#10;                        {' '}Đang kết nối lại...&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Chat Windows Container */}&#10;            &lt;div className=&quot;chat-windows-container&quot; id=&quot;chatWindowsContainer&quot;&gt;&#10;                {Array.from(openChatWindows.entries()).map(([conversationId, chatData]) =&gt; {&#10;                    const conversation = conversations.find(c =&gt; c.id === conversationId) || chatData;&#10;                    return (&#10;                        &lt;ChatWindow&#10;                            key={conversationId}&#10;                            conversation={conversation}&#10;                            minimized={chatData.minimized}&#10;                            currentUserId={currentUserId}&#10;                            unreadCount={conversation.unreadCount || 0}&#10;                            onClose={() =&gt; handleCloseChatWindow(conversationId)}&#10;                            onMinimize={() =&gt; handleMinimizeChatWindow(conversationId)}&#10;                            onNewMessage={(message) =&gt; handleNewMessage(conversationId, message)}&#10;                        /&gt;&#10;                    );&#10;                })}&#10;            &lt;/div&gt;&#10;        &lt;/&gt;&#10;    );&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>