document.addEventListener("DOMContentLoaded", function () {
    // L·∫•y c√°c elements
    const chatToggle = document.getElementById("chatToggle");
    const sideChat = document.getElementById("sideChat");
    const chatPopupOverlay = document.getElementById("chatPopupOverlay");
    const chatCloseBtn = document.getElementById("chatCloseBtn");
    const friendItems = document.querySelectorAll(".friend-item");
    const chatWindowsContainer = document.getElementById("chatWindowsContainer");

    // Store opened chat windows
    const openChatWindows = new Map();

    // M·ªü/ƒë√≥ng popup chat
    chatToggle.addEventListener("click", function (e) {
        e.stopPropagation();
        const isActive = sideChat.classList.contains("is-active");

        if (isActive) {
            closeChatPopup();
        } else {
            openChatPopup();
        }
    });

    chatCloseBtn.addEventListener("click", function () {
        closeChatPopup();
    });

    // Close popup khi click v√†o overlay
    chatPopupOverlay.addEventListener("click", function () {
        closeChatPopup();
    });

    function openChatPopup() {
        sideChat.classList.add("is-active");
        chatPopupOverlay.classList.add("is-active");
        // Remove body overflow modification to prevent CSS conflicts
    }

    function closeChatPopup() {
        sideChat.classList.remove("is-active");
        chatPopupOverlay.classList.remove("is-active");
        // Remove body overflow modification to prevent CSS conflicts
    }

    // Ch·ªçn b·∫°n b√® ƒë·ªÉ chat - M·ªü Facebook-style chat window
    friendItems.forEach(item => {
        item.addEventListener("click", function () {
            // L·∫•y th√¥ng tin b·∫°n b√®
            const friendId = this.dataset.friend;
            const friendName = this.querySelector(".friend-name").textContent;
            const friendStatus = this.querySelector(".friend-status").textContent;
            const friendAvatar = this.querySelector(".friend-avatar").src;

            // ƒê√≥ng popup chat
            closeChatPopup();

            // M·ªü ho·∫∑c focus chat window
            openChatWindow({
                id: friendId,
                name: friendName,
                status: friendStatus,
                avatar: friendAvatar
            });

            // X√≥a unread count
            const unreadCount = this.querySelector(".unread-count");
            if (unreadCount) {
                unreadCount.remove();
            }
        });
    });

    // Function to create Facebook-style chat window
    function openChatWindow(friend) {
        // Ki·ªÉm tra xem chat window ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (openChatWindows.has(friend.id)) {
            const existingWindow = openChatWindows.get(friend.id);
            existingWindow.classList.remove('minimized');
            existingWindow.classList.add('open');
            existingWindow.scrollIntoView({ behavior: 'smooth', block: 'end' });
            return;
        }

        // T·∫°o chat window m·ªõi
        const chatWindow = document.createElement('div');
        chatWindow.className = 'chat-window';
        chatWindow.dataset.friendId = friend.id;

        chatWindow.innerHTML = `
            <div class="chat-window-header">
                <img src="${friend.avatar}" alt="Avatar" class="chat-window-avatar">
                <div class="chat-window-info">
                    <div class="chat-window-name">${friend.name}</div>
                    <div class="chat-window-status">${friend.status}</div>
                </div>
                <div class="chat-window-controls">
                    <button class="chat-window-minimize" title="Thu nh·ªè">‚àí</button>
                    <button class="chat-window-close" title="ƒê√≥ng">√ó</button>
                </div>
            </div>
            <div class="chat-window-messages" data-friend-id="${friend.id}">
                <!-- Messages will be loaded here -->
            </div>
            <div class="chat-window-input-container">
                <input type="text" placeholder="Aa" class="chat-window-input" data-friend-id="${friend.id}">
                <button class="chat-window-send">‚Üí</button>
            </div>
        `;

        // Th√™m v√†o container
        chatWindowsContainer.appendChild(chatWindow);
        openChatWindows.set(friend.id, chatWindow);

        // Load tin nh·∫Øn
        loadChatWindowMessages(friend.id);

        // Show v·ªõi animation
        setTimeout(() => {
            chatWindow.classList.add('open');
        }, 10);

        // Event listeners cho chat window
        setupChatWindowEvents(chatWindow, friend);
    }

    function setupChatWindowEvents(chatWindow, friend) {
        const header = chatWindow.querySelector('.chat-window-header');
        const minimizeBtn = chatWindow.querySelector('.chat-window-minimize');
        const closeBtn = chatWindow.querySelector('.chat-window-close');
        const input = chatWindow.querySelector('.chat-window-input');
        const sendBtn = chatWindow.querySelector('.chat-window-send');

        // Toggle minimize when clicking header
        header.addEventListener('click', (e) => {
            if (e.target === minimizeBtn || e.target === closeBtn) return;
            chatWindow.classList.toggle('minimized');
        });

        // Minimize
        minimizeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            chatWindow.classList.toggle('minimized');
        });

        // Close
        closeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            chatWindow.classList.remove('open');
            setTimeout(() => {
                chatWindow.remove();
                openChatWindows.delete(friend.id);
            }, 300);
        });

        // Send message
        function sendChatWindowMessage() {
            const messageText = input.value.trim();
            if (messageText === "") return;

            // Add message to chat window
            addMessageToChatWindow(friend.id, messageText, true);
            input.value = "";

            // Simulate reply
            setTimeout(() => {
                simulateChatWindowReply(friend.id);
            }, 1000 + Math.random() * 2000);
        }

        sendBtn.addEventListener('click', sendChatWindowMessage);
        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendChatWindowMessage();
            }
        });
    }

    // Function to detect and format links in text
    function linkify(text) {
        const urlRegex = /(https?:\/\/[^\s]+)/g;
        return text.replace(urlRegex, (url) => {
            return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="message-link">${url}</a>`;
        });
    }

    function addMessageToChatWindow(friendId, messageText, isSent = false) {
        const chatWindow = openChatWindows.get(friendId);
        if (!chatWindow) return;

        const messagesContainer = chatWindow.querySelector('.chat-window-messages');
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-window-message ${isSent ? 'sent' : 'received'}`;

        const currentTime = new Date().toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit'
        });

        if (isSent) {
            messageDiv.innerHTML = `
                <div class="chat-window-message-content">
                    <div class="chat-window-message-text">${linkify(messageText)}</div>
                    <div class="chat-window-message-time">${currentTime}</div>
                </div>
            `;
        } else {
            const friend = Array.from(friendItems).find(item => item.dataset.friend === friendId);
            const avatar = friend ? friend.querySelector('.friend-avatar').src : 'channels/myprofile.jpg';

            messageDiv.innerHTML = `
                <img src="${avatar}" alt="Avatar" class="chat-window-message-avatar">
                <div class="chat-window-message-content">
                    <div class="chat-window-message-text">${linkify(messageText)}</div>
                    <div class="chat-window-message-time">${currentTime}</div>
                </div>
            `;
        }

        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function simulateChatWindowReply(friendId) {
        const replies = [
            "C·∫£m ∆°n b·∫°n!",
            "M√¨nh hi·ªÉu r·ªìi üòä",
            "ƒê∆∞·ª£c th√¥i!",
            "Haha, th·∫≠t √†?",
            "OK, ch√∫ng ta g·∫∑p nhau sau nh√©",
            "Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!",
        ];

        const randomReply = replies[Math.floor(Math.random() * replies.length)];

        // Show typing indicator first
        showTypingIndicator(friendId);

        setTimeout(() => {
            hideTypingIndicator(friendId);
            addMessageToChatWindow(friendId, randomReply, false);
        }, 1500);
    }

    function showTypingIndicator(friendId) {
        const chatWindow = openChatWindows.get(friendId);
        if (!chatWindow) return;

        const messagesContainer = chatWindow.querySelector('.chat-window-messages');
        const typingDiv = document.createElement('div');
        typingDiv.className = 'chat-window-message received typing-indicator-message';
        typingDiv.innerHTML = `
            <img src="channels/myprofile.jpg" alt="Avatar" class="chat-window-message-avatar">
            <div class="typing-indicator">
                <div class="typing-dots">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;

        messagesContainer.appendChild(typingDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function hideTypingIndicator(friendId) {
        const chatWindow = openChatWindows.get(friendId);
        if (!chatWindow) return;

        const typingIndicator = chatWindow.querySelector('.typing-indicator-message');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    function loadChatWindowMessages(friendId) {
        const messageExamples = {
            "nguyen-van-a": [
                {
                    type: "received",
                    text: "Ch√†o b·∫°n! B·∫°n c√≥ kh·ªèe kh√¥ng?",
                    time: "10:30"
                },
                {
                    type: "sent",
                    text: "Ch√†o! M√¨nh kh·ªèe, c·∫£m ∆°n b·∫°n nh√©",
                    time: "10:32"
                }
            ],
            "tran-thi-b": [
                {
                    type: "received",
                    text: "H√¥m nay c√¥ng vi·ªác th·∫ø n√†o?",
                    time: "09:15"
                },
                {
                    type: "sent",
                    text: "Kh√° b·∫≠n, nh∆∞ng m·ªçi th·ª© ƒë·ªÅu ·ªïn. B·∫°n th√¨ sao?",
                    time: "09:20"
                }
            ],
            "le-van-c": [
                {
                    type: "sent",
                    text: "B·∫°n ∆°i, l√¢u r·ªìi kh√¥ng g·∫∑p!",
                    time: "08:45"
                },
                {
                    type: "received",
                    text: "·ª™a, m√¨nh c≈©ng nh·ªõ b·∫°n l·∫Øm. Khi n√†o r·∫£nh g·∫∑p nhau nh√©!",
                    time: "08:50"
                }
            ]
        };

        const messages = messageExamples[friendId] || [];
        messages.forEach(msg => {
            addMessageToChatWindow(friendId, msg.text, msg.type === "sent");
        });
    }

    // Removed old conversation code - now using Facebook-style chat windows

    // Prevent event bubbling khi click trong popup chat
    sideChat.addEventListener("click", function (e) {
        e.stopPropagation();
    });

    // Handle ESC key to close popup
    document.addEventListener("keydown", function (e) {
        if (e.key === "Escape" && sideChat.classList.contains("is-active")) {
            closeChatPopup();
        }
    });
});